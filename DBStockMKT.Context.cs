//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PGMKTStock
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class DBStockMarketEntities : DbContext
    {
        public DBStockMarketEntities()
            : base("name=DBStockMarketEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<DBCustomer> DBCustomers { get; set; }
        public DbSet<DBDeposit> DBDeposits { get; set; }
        public DbSet<DBDepositType> DBDepositTypes { get; set; }
        public DbSet<DBEmployee> DBEmployees { get; set; }
        public DbSet<DBInstrumentHeader> DBInstrumentHeaders { get; set; }
        public DbSet<DBLogChangeCustomer> DBLogChangeCustomers { get; set; }
        public DbSet<DBLogOpenOfCustomer> DBLogOpenOfCustomers { get; set; }
        public DbSet<DBLogPriceOfCustomer> DBLogPriceOfCustomers { get; set; }
        public DbSet<DBLogSummaryOfCustomer> DBLogSummaryOfCustomers { get; set; }
        public DbSet<DBLogTradeOfCustomer> DBLogTradeOfCustomers { get; set; }
        public DbSet<DBMarketPrice> DBMarketPrices { get; set; }
        public DbSet<DBRealized> DBRealizeds { get; set; }
        public DbSet<DBSetting> DBSettings { get; set; }
        public DbSet<DBTradeClose> DBTradeCloses { get; set; }
        public DbSet<DBTradeLog> DBTradeLogs { get; set; }
        public DbSet<DBTradeLogStatu> DBTradeLogStatus { get; set; }
        public DbSet<DBTradeOpen> DBTradeOpens { get; set; }
        public DbSet<DBTradeOpen_Log> DBTradeOpen_Log { get; set; }
        public DbSet<DBTradeOpenStatusId> DBTradeOpenStatusIds { get; set; }
        public DbSet<DBTradeOpenType> DBTradeOpenTypes { get; set; }
    
        public virtual int GetDailyReportCustomerByDate(Nullable<System.DateTime> tradingDateStart, string customerId)
        {
            var tradingDateStartParameter = tradingDateStart.HasValue ?
                new ObjectParameter("TradingDateStart", tradingDateStart) :
                new ObjectParameter("TradingDateStart", typeof(System.DateTime));
    
            var customerIdParameter = customerId != null ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDailyReportCustomerByDate", tradingDateStartParameter, customerIdParameter);
        }
    
        public virtual ObjectResult<GetDailyReportCustomerForheader_Result> GetDailyReportCustomerForheader(Nullable<System.DateTime> tradingDateStart, string customerId)
        {
            var tradingDateStartParameter = tradingDateStart.HasValue ?
                new ObjectParameter("TradingDateStart", tradingDateStart) :
                new ObjectParameter("TradingDateStart", typeof(System.DateTime));
    
            var customerIdParameter = customerId != null ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDailyReportCustomerForheader_Result>("GetDailyReportCustomerForheader", tradingDateStartParameter, customerIdParameter);
        }
    
        public virtual ObjectResult<GetDailyReportCustomerForLogClose_Result> GetDailyReportCustomerForLogClose(Nullable<System.DateTime> tradingDateStart, string customerId)
        {
            var tradingDateStartParameter = tradingDateStart.HasValue ?
                new ObjectParameter("TradingDateStart", tradingDateStart) :
                new ObjectParameter("TradingDateStart", typeof(System.DateTime));
    
            var customerIdParameter = customerId != null ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDailyReportCustomerForLogClose_Result>("GetDailyReportCustomerForLogClose", tradingDateStartParameter, customerIdParameter);
        }
    
        public virtual ObjectResult<GetDailyReportCustomerForLogOpen_Result> GetDailyReportCustomerForLogOpen(Nullable<System.DateTime> tradingDateStart, string customerId)
        {
            var tradingDateStartParameter = tradingDateStart.HasValue ?
                new ObjectParameter("TradingDateStart", tradingDateStart) :
                new ObjectParameter("TradingDateStart", typeof(System.DateTime));
    
            var customerIdParameter = customerId != null ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDailyReportCustomerForLogOpen_Result>("GetDailyReportCustomerForLogOpen", tradingDateStartParameter, customerIdParameter);
        }
    
        public virtual ObjectResult<GetDailyReportTradingByDate_Result> GetDailyReportTradingByDate(Nullable<System.DateTime> tradeCloseDate, string customerId)
        {
            var tradeCloseDateParameter = tradeCloseDate.HasValue ?
                new ObjectParameter("TradeCloseDate", tradeCloseDate) :
                new ObjectParameter("TradeCloseDate", typeof(System.DateTime));
    
            var customerIdParameter = customerId != null ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDailyReportTradingByDate_Result>("GetDailyReportTradingByDate", tradeCloseDateParameter, customerIdParameter);
        }
    }
}
